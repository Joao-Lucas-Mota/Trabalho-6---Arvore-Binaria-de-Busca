// Joao Lucas Mota Nogueira da Costa
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdbool.h>

// definicao do tipo no
typedef struct no {
  int valor;
  struct no *esq;
  struct no *dir;
} Arv;

// funcao que cria a arvore
Arv *criaArv() {
  Arv *ArvBin = (Arv *)malloc(sizeof(Arv));
  if (ArvBin != NULL) {
    ArvBin = NULL;
  }
  return ArvBin;
}

// funcao que insere os valores na arvore
Arv *inserir(Arv *raiz, int vetor[], int i) {
  if (raiz == NULL) {
    Arv *aux = malloc(sizeof(Arv));
    aux->valor = vetor[i];
    aux->esq = NULL;
    aux->dir = NULL;
    return aux;
  } else {
    if (vetor[i] < raiz->valor) {
      raiz->esq = inserir(raiz->esq, vetor, i);
    } else {
      raiz->dir = inserir(raiz->dir, vetor, i);
    }
    return raiz;
  }
}

// imprime a arvore usando identacao para identificar os diferentes niveis da
// arvore
void imprimir_arvore(Arv *raiz, int ident) {
  int i = 1;
  if (raiz != NULL) {
    while (i <= ident) {
      printf("\t");
      i++;
    }
    if (ident == 0) {
      printf("%d\n", raiz->valor);
      imprimir_arvore(raiz->esq, ident + 1);
      imprimir_arvore(raiz->dir, ident + 1);
    } else {
      printf("+%d\n", raiz->valor);
      imprimir_arvore(raiz->esq, ident + 1);
      imprimir_arvore(raiz->dir, ident + 1);
    }
  }
}

// imprime um vetor com os valores da arvore em "pre-order"
void imprimir_preOrder(Arv *raiz) {
  if (raiz != NULL) {
    printf("%d ", raiz->valor);
    imprimir_preOrder(raiz->esq);
    imprimir_preOrder(raiz->dir);
  }
}

// imprime um vetor com os valores da arvore "in-order"
void imprimir_inOrder(Arv *raiz) {
  if (raiz->esq != NULL) {
    imprimir_inOrder(raiz->esq);
  }
  printf("%d ", raiz->valor);
  if (raiz->dir != NULL) {
    imprimir_inOrder(raiz->dir);
  }
}

// imprime um vetor com os valores da arvore em "post-order"
void imprimir_postOrder(Arv *raiz) {
  if (raiz->esq != NULL) {
    imprimir_postOrder(raiz->esq);
  }
  if (raiz->dir != NULL) {
    imprimir_postOrder(raiz->dir);
  }
  printf("%d ", raiz->valor);
}

// imprime um vetor com os valores das folhas da arvore
void imprimir_folhas(Arv *raiz) {
  if (raiz->esq != NULL) {
    imprimir_folhas(raiz->esq);
  }
  if (raiz->dir != NULL) {
    imprimir_folhas(raiz->dir);
  }

  if (raiz->dir == NULL) {
    if (raiz->esq == NULL) {
      printf("%d ", raiz->valor);
    }
  }
}

// verificacao de numeros na arvore
int verifica_valores(Arv *raiz, int x) {
  if (raiz->valor != x) {
    if (raiz->esq != NULL) {
      return verifica_valores(raiz->esq, x);
    }
    if (raiz->dir != NULL) {
      return verifica_valores(raiz->dir, x);
    }
    return 0;
  } else {
    return 1;
  }
}

// funcao que libera os nos da memoria
void liberaMem(Arv *raiz) {
  if (raiz->esq != NULL) {
    liberaMem(raiz->esq);
  }
  if (raiz->dir != NULL) {
    liberaMem(raiz->dir);
  }
  free(raiz);
}

int main() {

  int teste = 0, y;

  // criando arvore
  Arv *raiz = criaArv();

  // criando vetor
  srand(time(0));
  int x = 10 + rand() % 16;
  printf("Tamanho: %d\n", x);
  int valores[x];
  for (int i = 0; i < x; i++) {
    int y = 1 + rand() % 999;
    valores[i] = y;
  }

  // imprimindo vetor
  printf("Array Gerado: [");
  for (int i = 0; i < x; i++) {
    if (i == x - 1) {
      printf("%d", valores[i]);
    } else {
      printf("%d, ", valores[i]);
    }
  }
  printf("]\n\nArvore Binaria: \n");

  // inserindo valores do vetor na arvore
  for (int i = 0; i < x; i++) {
    raiz = inserir(raiz, valores, i);
  }
  imprimir_arvore(raiz, 0);

  printf("\nVetor pre-order: { ");
  imprimir_preOrder(raiz);
  printf("}\n");

  printf("\nVetor in-order: { ");
  imprimir_inOrder(raiz);
  printf("}\n");

  printf("\nVetor post-order: { ");
  imprimir_postOrder(raiz);
  printf("}\n");

  printf("\nVetor das folhas: { ");
  imprimir_folhas(raiz);
  printf("}\n");

  for (int i = 0; i < 10; i++) {
    y = 300 + rand() % 275;
    if (verifica_valores(raiz, y) == 1) {
      printf("\nValor gerado: %d; Diagnostico: Presente\n", y);
    } else {
      printf("\nValor gerado %d; Diagnostico: Ausente\n", y);
    }
  }
  liberaMem(raiz);
}
